using System;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Azure.Identity;
using Azure.Storage.Blobs;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;

namespace MalwareScanningFunctionApp;

public static class ScanFunction
{
    [FunctionName("Scan")]
    public static async Task<IActionResult> RunAsync(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)]
        HttpRequest req, ILogger logger)
    {
        //Assert this is a multipart with a single file
        if (!req.Headers.TryGetValue("Content-Type", out var contentType))
        {
            return new BadRequestResult();
        }

        if (contentType.Count != 1)
        {
            logger.LogInformation("Expected a single Content-Type header");
            return new BadRequestResult();
        }

        if (req.Form.Files.Count != 1)
        {
            logger.LogInformation("Expected a single file. Found {FileCount}", req.Form.Files.Count);
            return new BadRequestResult();
        }

        var blobId = Guid.NewGuid().ToString();
        var file = req.Form.Files.Single();
        var fileName = file.FileName;

        logger.LogInformation("Initiating scan for {FileName} / {BlobName}", fileName, blobId);

        var storageAccountEndpoint = Environment.GetEnvironmentVariable("StorageAccountEndpoint");
        var blobContainerName = Environment.GetEnvironmentVariable("StorageAccountContainerName");

        var sw = new Stopwatch();
        sw.Start();

        var client = new BlobServiceClient(new Uri(storageAccountEndpoint), new DefaultAzureCredential());
        var containerResponse = client.GetBlobContainerClient(blobContainerName);
        await containerResponse.CreateIfNotExistsAsync();

        logger.LogDebug("Uploading blob {BlobName} to storage", blobId);
        await using var openReadStream = req.Form.Files.Single().OpenReadStream();

        await containerResponse.UploadBlobAsync(blobId, openReadStream);
        sw.Stop();
        logger.LogDebug("Uploaded blob {BlobName} to storage (took {Time} ms)", blobId, sw.ElapsedMilliseconds);

        var wait = 120;
        sw.Restart();
        var blobClient = new BlobClient(storageAccountEndpoint, blobContainerName, blobId);
        while (wait > 0)
        {
            logger.LogDebug("Checking tags for blob {BlobName}", blobId);
            
            var index = await blobClient.GetTagsAsync();
            if (index.Value.Tags.TryGetValue("Malware Scanning scan result", out var result))
            {
                sw.Stop();

                logger.LogInformation(
                    "Found Malware Scanning Tag on blob {BlobName}. Result is {ScanResult}. Took {Time} ms.",
                    blobId,
                    result,
                    sw.ElapsedMilliseconds);

                var scanResultResponse = new OkObjectResult(new
                {
                    Result = result,
                    ScanResult = result.Equals("No threats found", StringComparison.InvariantCultureIgnoreCase)
                        ? ScanResult.Ok.ToString()
                        : ScanResult.ThreatDetected.ToString(),
                    FileName = fileName,
                    Id = blobId,
                    ScanMs = sw.ElapsedMilliseconds
                });
                
                return scanResultResponse;
            }

            wait--;
            logger.LogDebug("Did not find Malware Scanning Tag on blob {BlobName}. Remaining retries {wait}",
                blobId, wait);
            await Task.Delay(TimeSpan.FromSeconds(2));
        }

        logger.LogWarning(
            "Failed to find Malware Scanning Tag on blob {FileName} / {BlobName}. No remaining retries. Returning Inconclusive result",
            fileName, blobId);

        var response = new OkObjectResult(new
        {
            Id = blobId,
            FileName = fileName,
            Result = "Inconclusive. Please try again",
            ScanResult = ScanResult.Unknown
        })
        {
            StatusCode = (int)HttpStatusCode.GatewayTimeout
        };

        return response;
    }
}

public enum ScanResult
{
    Ok,
    ThreatDetected,
    Unknown
}